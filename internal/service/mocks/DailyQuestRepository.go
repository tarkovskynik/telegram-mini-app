// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	model "UD_telegram_miniapp/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDailyQuestRepository is an autogenerated mock type for the DailyQuestRepository type
type MockDailyQuestRepository struct {
	mock.Mock
}

// GetDailyQuestStatus provides a mock function with given fields: ctx, telegramID
func (_m *MockDailyQuestRepository) GetDailyQuestStatus(ctx context.Context, telegramID int64) (*model.DailyQuest, error) {
	ret := _m.Called(ctx, telegramID)

	if len(ret) == 0 {
		panic("no return value specified for GetDailyQuestStatus")
	}

	var r0 *model.DailyQuest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.DailyQuest, error)); ok {
		return rf(ctx, telegramID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.DailyQuest); ok {
		r0 = rf(ctx, telegramID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DailyQuest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDailyQuestStatus provides a mock function with given fields: ctx, quest
func (_m *MockDailyQuestRepository) UpdateDailyQuestStatus(ctx context.Context, quest *model.DailyQuest) error {
	ret := _m.Called(ctx, quest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDailyQuestStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DailyQuest) error); ok {
		r0 = rf(ctx, quest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPoints provides a mock function with given fields: ctx, telegramID, points
func (_m *MockDailyQuestRepository) UpdateUserPoints(ctx context.Context, telegramID int64, points int) error {
	ret := _m.Called(ctx, telegramID, points)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPoints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) error); ok {
		r0 = rf(ctx, telegramID, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDailyQuestRepository creates a new instance of MockDailyQuestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDailyQuestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDailyQuestRepository {
	mock := &MockDailyQuestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
